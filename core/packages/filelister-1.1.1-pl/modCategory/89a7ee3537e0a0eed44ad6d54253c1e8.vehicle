<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      'baa2fc54acaf0433cb399661e3c7808d' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":0,"name":"FileLister","description":"A file listing snippet.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * FileLister\\n *\\n * Copyright 2010 by Shaun McCormick <shaun@modxcms.com>\\n *\\n * This file is part of FileLister, a file listing Extra.\\n *\\n * FileLister is free software; you can redistribute it and\\/or modify it under the\\n * terms of the GNU General Public License as published by the Free Software\\n * Foundation; either version 2 of the License, or (at your option) any later\\n * version.\\n *\\n * FileLister is distributed in the hope that it will be useful, but WITHOUT ANY\\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR\\n * A PARTICULAR PURPOSE. See the GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License along with\\n * FileLister; if not, write to the Free Software Foundation, Inc., 59 Temple\\n * Place, Suite 330, Boston, MA 02111-1307 USA\\n *\\n * @package filelister\\n *\\/\\n\\/**\\n * File listing snippet\\n *\\n * @var modX $modx\\n * @var FileLister $fileLister\\n * @var array $scriptProperties\\n * \\n * @package filelister\\n *\\/\\n$fileLister = $modx->getService(\'filelister\',\'FileLister\',$modx->getOption(\'filelister.core_path\',null,$modx->getOption(\'core_path\').\'components\\/filelister\\/\').\'model\\/filelister\\/\',$scriptProperties);\\nif (!($fileLister instanceof FileLister)) return \'\';\\n\\n\\/* get path *\\/\\n$path = $modx->getOption(\'path\',$scriptProperties,false);\\n$fileLister->sanitize($path);\\nif (empty($path) || !is_dir($path)) return \'\';\\n\\n\\/* setup default properties *\\/\\n$fileTpl = $modx->getOption(\'fileTpl\',$scriptProperties,\'feoFile\');\\n$fileLinkTpl = $modx->getOption(\'fileLinkTpl\',$scriptProperties,\'feoFileLink\');\\n$directoryTpl = $modx->getOption(\'directoryTpl\',$scriptProperties,\'feoDirectory\');\\n$dateFormat = $modx->getOption(\'dateFormat\',$scriptProperties,\'%b %d, %Y\');\\n$skipDirs = $modx->getOption(\'skipDirs\',$scriptProperties,\'.svn,.git,.metadata,.tmp,.DS_Store,_notes\');\\n$skipDirs = array_merge(array(\'.\',\'..\'),explode(\',\',$skipDirs));\\n$placeholderPrefix = $modx->getOption(\'placeholderPrefix\',$scriptProperties,\'filelister\');\\n$pathSeparator = $modx->getOption(\'pathSeparator\',$scriptProperties,\'\\/\');\\n$pathTpl = $modx->getOption(\'pathTpl\',$scriptProperties,\'feoPathLink\');\\n$navKey = $modx->getOption(\'navKey\',$scriptProperties,\'fd\');\\n$showFiles = (boolean)$modx->getOption(\'showFiles\',$scriptProperties,true);\\n$showDirectories = (boolean)$modx->getOption(\'showDirectories\',$scriptProperties,true);\\n$showExt = $modx->getOption(\'showExt\',$scriptProperties,\'\');\\nif (!empty($showExt)) $showExt = explode(\',\',$showExt);\\n$showDownloads = (boolean)$modx->getOption(\'showDownloads\',$scriptProperties,true);\\n$uniqueDownloads = (boolean)$modx->getOption(\'uniqueDownloads\',$scriptProperties,true);\\n$useGeolocation = (boolean)$modx->getOption(\'useGeolocation\',$scriptProperties,true);\\n$limit = (int)$modx->getOption(\'limit\',$scriptProperties,0);\\n$cls = $modx->getOption(\'cls\',$scriptProperties,\'feo-row\');\\n$altCls = $modx->getOption(\'altCls\',$scriptProperties,\'feo-alt-row\');\\n$firstCls = $modx->getOption(\'firstCls\',$scriptProperties,\'feo-first-row\');\\n$lastCls = $modx->getOption(\'lastCls\',$scriptProperties,\'feo-last-row\');\\n\\n\\/* get relPath and curPath *\\/\\n$fd = $modx->getOption($navKey,$_REQUEST,false);\\n$relPath = \'\';\\nif ($fd) {\\n    $relPath = $fileLister->parseKey($fd);\\n    if ($relPath == \'.\') $relPath = \'\';\\n}\\n$curPath = $fileLister->sanitize($path.$relPath);\\n\\n\\/* if pointing to file, output file *\\/\\nif (!is_dir($curPath) && is_file($curPath)) {\\n    \\/* do download tracking and geolocation *\\/\\n    $tenMinAgo = time() - (60 * 5); \\/* prevent duplicate download tracking *\\/\\n    $tenMinAgo = strftime(\'%Y-%m-%d %H:%M:%S\',$tenMinAgo);\\n    $double = $modx->getCount(\'feoDownload\',array(\\n        \'path\' => $curPath,\\n        \'ip\' => $_SERVER[\'REMOTE_ADDR\'],\\n        \'downloadedon:>\' => $tenMinAgo,\\n    ));\\n    if ($double <= 0) {\\n        $unique = $modx->getCount(\'feoDownload\',array(\\n            \'path\' => $curPath,\\n            \'ip\' => $_SERVER[\'REMOTE_ADDR\'],\\n        ));\\n\\n        \\/** @var feoDownload $dl *\\/\\n        $dl = $modx->newObject(\'feoDownload\');\\n        $dl->set(\'path\',$curPath);\\n        $dl->set(\'ip\',$_SERVER[\'REMOTE_ADDR\']);\\n        $dl->set(\'downloadedon\',strftime(\'%Y-%m-%d %H:%M:%S\'));\\n        $dl->set(\'unique\',$unique > 0 ? false : true);\\n        $dl->set(\'referer\',$_SERVER[\'HTTP_REFERER\']);\\n\\n        $geoApiKey = $modx->getOption(\'filelister.ipinfodb_api_key\',$scriptProperties,\'\');\\n        if ($useGeolocation && !empty($geoApiKey)) {\\n            $modx->loadClass(\'geolocation.ipinfodb\',$fileLister->config[\'modelPath\'],true,true);\\n            $geo = new ipinfodb($modx);\\n            $geo->setKey($geoApiKey);\\n            $locations = $geo->getGeoLocation($_SERVER[\'REMOTE_ADDR\']);\\n            $geolocation = array();\\n            if (!empty($locations[0]) && is_array($locations[0])) {\\n                $gl = $locations[0];\\n                $dl->set(\'geolocation\',$gl);\\n                $dl->set(\'country\',$gl[\'CountryCode\']);\\n                $dl->set(\'region\',$gl[\'RegionName\']);\\n                $dl->set(\'city\',$gl[\'City\']);\\n                $dl->set(\'zip\',$gl[\'ZipPostalCode\']);\\n            }\\n            if ($modx->user->hasSessionContext($modx->context->get(\'key\'))) {\\n                $dl->set(\'user\',$modx->user->get(\'id\'));\\n            }\\n        }\\n        $dl->save();\\n\\n    }\\n\\n    $fileLister->loadHeaders($curPath);\\n    $fileLister->renderFile($curPath);\\n    die();\\n} elseif (!is_dir($curPath)) {\\n    \\/* if an invalid path, set to base *\\/\\n    $curPath = $path;\\n}\\n\\n\\/* check download access *\\/\\n$allowDownloadGroups = $modx->getOption(\'allowDownloadGroups\',$scriptProperties,\'\');\\nif (!empty($allowDownloadGroups)) $allowDownloadGroups = explode(\',\',$allowDownloadGroups);\\n\\n$canDownload = $modx->getOption(\'allowDownload\',$scriptProperties,true);\\nif ($modx->getOption(\'requireAuthDownload\',$scriptProperties,false)) {\\n    $requireAuthContext = $modx->getOption(\'requireAuthContext\',$scriptProperties,$modx->context->get(\'key\'));\\n    $canDownload = $modx->user->hasSessionContext($requireAuthContext);\\n}\\nif (!empty($allowDownloadGroups)) {\\n    $canDownload = $modx->user->isMember($allowDownloadGroups);\\n}\\nunset($requireAuthContext,$allowDownloadGroups);\\n\\n\\/* iterate list of files\\/dirs *\\/\\n$count = 0;\\n$directoryCount = 0;\\n$fileCount = 0;\\n$totalDownloads = 0;\\n$directories = array();\\n$files = array();\\n\\/** @var DirectoryIterator $file *\\/\\nforeach (new DirectoryIterator($curPath) as $file) {\\n    if (in_array($file,$skipDirs)) continue;\\n    if (!$file->isReadable()) continue;\\n\\n    \\/* make the key that is used for navigation *\\/\\n    $filePath = $file->getPathname();\\n    $filePath = $relPath.(!empty($relPath) ? \'\\/\' : \'\').$file->getFilename();\\n    $key = $fileLister->makeKey($filePath);\\n\\n    $fileArray = array();\\n    $fileArray[\'filename\'] = $file->getFilename();\\n    $fileArray[\'bytesize\'] = $file->getSize();\\n    $fileArray[\'filesize\'] = $fileLister->formatBytes($file->getSize());\\n    $fileArray[\'path\'] = str_replace(\'\\\\\\\\\', \'\\/\', $file->getPathname());\\n    $fileArray[\'relativePath\'] = $filePath;\\n    $fileArray[\'navKey\'] = $navKey;\\n    $fileArray[\'showDownloads\'] = $showDownloads;\\n\\n    \\/* if allowing for downloading, generate a link here *\\/\\n    if ($file->isDir() || $canDownload) {\\n        $fileArray[\'link\'] = $fileLister->getChunk($fileLinkTpl,array(\\n            \'url\' => $modx->makeUrl($modx->resource->get(\'id\'),\'\',array(\\n                $navKey => $key,\\n            )),\\n            \'filename\' => $fileArray[\'filename\'],\\n        ));\\n    } else {\\n        $fileArray[\'link\'] = $fileArray[\'filename\'];\\n    }\\n    \\/* if resource is a file *\\/\\n    if ($file->isFile() && $showFiles) {\\n        $fileArray[\'extension\'] = pathinfo($fileArray[\'path\'],PATHINFO_EXTENSION);\\n        if (!empty($showExt) && !in_array($fileArray[\'extension\'],$showExt)) continue;\\n        \\n        $fileArray[\'lastmod\'] = $file->getMTime();\\n        $fileArray[\'dateFormat\'] = $dateFormat;\\n\\n        \\/* get download count for file *\\/\\n        if ($showDownloads) {\\n            $w = array(\'path\' => $fileArray[\'path\']);\\n            if ($uniqueDownloads) $w[\'unique\'] = true;\\n            $fileArray[\'downloads\'] = $modx->getCount(\'feoDownload\',$w);\\n            $totalDownloads += (int)$fileArray[\'downloads\'];\\n        }\\n\\n        $files[] = $fileArray;\\n        $fileCount++;\\n        \\n    \\/* else if resource is a directory *\\/\\n    } elseif ($file->isDir() && $showDirectories) {\\n        $directories[] = $fileArray;\\n        $directoryCount++;\\n    }\\n    $count++;\\n}\\nunset($fileArray,$file);\\n\\n\\n\\/* do sorting on files *\\/\\n$sortBy = $modx->getOption(\'sortBy\',$scriptProperties,\'size\');\\n$sortDir = $modx->getOption(\'sortDir\',$scriptProperties,\'ASC\');\\ninclude_once $fileLister->config[\'includesPath\'].\'sort.algorithms.php\';\\n$algo = \'\';\\nswitch ($sortBy.\'-\'.$sortDir) {\\n    case \'filename-ASC\': case \'name-ASC\': $algo = \'feoSortByNameASC\'; break;\\n    case \'filename-DESC\': case \'name-DESC\': $algo = \'feoSortByNameDESC\'; break;\\n    case \'extension-ASC\': $algo = \'feoSortByExtensionASC\'; break;\\n    case \'extension-DESC\': $algo = \'feoSortByExtensionDESC\'; break;\\n    case \'date-ASC\': case \'lastmod-ASC\': $algo = \'feoSortByLastModifiedASC\'; break;\\n    case \'date-DESC\': case \'lastmod-DESC\': $algo = \'feoSortByLastModifiedDESC\'; break;\\n    case \'size-ASC\': $algo = \'feoSortBySizeASC\'; break;\\n    case \'size-DESC\': $algo = \'feoSortBySizeDESC\'; break;\\n}\\nif (!empty($algo)) { uasort($files,$algo); }\\nunset($algo,$sortBy,$sortDir);\\n\\n\\/* get templated chunks for each fs resource *\\/\\n$i = 0;\\n$totalCount = count($directories) + count($files);\\nif ($totalCount > $limit) $totalCount = $limit; \\/* getPage compat *\\/\\nforeach ($directories as $directory) {\\n    $odd = $i % 2;\\n    $directory[\'cls\'] = $odd ? $altCls : $cls;\\n    if ($i == 0) $directory[\'cls\'] .= \' \'.$firstCls;\\n    if ($i == ($totalCount-1)) $directory[\'cls\'] .= \' \'.$lastCls;\\n    $list[] = $fileLister->getChunk($directoryTpl,$directory);\\n    $i++;\\n}\\nunset($directory);\\nforeach ($files as $file) {\\n    $odd = $i % 2;\\n    $file[\'cls\'] = $odd ? $altCls : $cls;\\n    if ($i == 0) $file[\'cls\'] .= \' \'.$firstCls;\\n    if ($i == ($totalCount-1)) $file[\'cls\'] .= \' \'.$lastCls;\\n    $list[] = $fileLister->getChunk($fileTpl,$file);\\n    $i++;\\n}\\nunset($file);\\n\\n\\/* set placeholders *\\/\\n$homePathName = $modx->getOption(\'homePathName\',$scriptProperties,\'\');\\nif (!empty($homePathName)) {\\n    $path = $homePathName;\\n}\\n$placeholders = array(\\n    \'total\' => $count,\\n    \'total.files\' => $fileCount,\\n    \'total.directories\' => $directoryCount,\\n    \'total.downloads\' => $totalDownloads,\\n    \'path\' => $fileLister->parsePathIntoLinks($relPath,$path,$pathTpl,$pathSeparator,$navKey),\\n    \'relativePath\' => $relPath,\\n);\\n$modx->toPlaceholders($placeholders,$placeholderPrefix);\\n\\n\\/* output *\\/\\n$outputSeparator = $modx->getOption(\'outputSeparator\',$scriptProperties,\'\');\\nif (count($list) > 0) {\\n    \\/* pagination handling in conjunction with getPage *\\/\\n    if (!empty($limit)) {\\n        $pageVarKey = $modx->getOption(\'pageVarKey\',$scriptProperties,\'page\');\\n        $page = (int)$modx->getOption($pageVarKey,$scriptProperties,$modx->getOption($pageVarKey,$_REQUEST,1));\\n        $offset = (int)$modx->getOption(\'offset\',$scriptProperties,0);\\n        \\/* cut the list of file into blocks *\\/\\n        $list = array_chunk($list,$limit,true);\\n        \\/* output the current listing block *\\/\\n        $output = implode($outputSeparator,$list[$page - 1]);\\n        \\/* need to make the total available without placeholder prefix for getPage *\\/\\n        $modx->setPlaceholder(\'total\',$count);\\n    } else {\\n        \\/* no pagination so display all results *\\/\\n        $output = implode($outputSeparator,$list);\\n    }\\n} else {\\n  \\/* empty directory so display nothing *\\/\\n  $output = \'\';\\n}\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\',$scriptProperties,false);\\nif ($toPlaceholder) {\\n    $modx->setPlaceholder($toPlaceholder,$output);\\n    return \'\';\\n}\\nreturn $output;","locked":0,"properties":"a:27:{s:4:\\"path\\";a:6:{s:4:\\"name\\";s:4:\\"path\\";s:4:\\"desc\\";s:18:\\"prop_feo.path_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:7:\\"fileTpl\\";a:6:{s:4:\\"name\\";s:7:\\"fileTpl\\";s:4:\\"desc\\";s:21:\\"prop_feo.filetpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:7:\\"feoFile\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:12:\\"directoryTpl\\";a:6:{s:4:\\"name\\";s:12:\\"directoryTpl\\";s:4:\\"desc\\";s:26:\\"prop_feo.directorytpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:12:\\"feoDirectory\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:11:\\"fileLinkTpl\\";a:6:{s:4:\\"name\\";s:11:\\"fileLinkTpl\\";s:4:\\"desc\\";s:25:\\"prop_feo.filelinktpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"feoFileLink\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:10:\\"dateFormat\\";a:6:{s:4:\\"name\\";s:10:\\"dateFormat\\";s:4:\\"desc\\";s:24:\\"prop_feo.dateformat_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:9:\\"%b %d, %Y\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:3:\\"cls\\";a:6:{s:4:\\"name\\";s:3:\\"cls\\";s:4:\\"desc\\";s:17:\\"prop_feo.cls_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:7:\\"feo-row\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:6:\\"altCls\\";a:6:{s:4:\\"name\\";s:6:\\"altCls\\";s:4:\\"desc\\";s:20:\\"prop_feo.altcls_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"feo-alt-row\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:8:\\"firstCls\\";a:6:{s:4:\\"name\\";s:8:\\"firstCls\\";s:4:\\"desc\\";s:22:\\"prop_feo.firstcls_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:13:\\"feo-first-row\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:7:\\"lastCls\\";a:6:{s:4:\\"name\\";s:7:\\"lastCls\\";s:4:\\"desc\\";s:21:\\"prop_feo.lastcls_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:12:\\"feo-last-row\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:15:\\"outputSeparator\\";a:6:{s:4:\\"name\\";s:15:\\"outputSeparator\\";s:4:\\"desc\\";s:29:\\"prop_feo.outputseparator_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"\\n\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:8:\\"skipDirs\\";a:6:{s:4:\\"name\\";s:8:\\"skipDirs\\";s:4:\\"desc\\";s:22:\\"prop_feo.skipdirs_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:41:\\".svn,.git,.metadata,.tmp,.DS_Store,_notes\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:17:\\"placeholderPrefix\\";a:6:{s:4:\\"name\\";s:17:\\"placeholderPrefix\\";s:4:\\"desc\\";s:31:\\"prop_feo.placeholderprefix_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:10:\\"filelister\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:13:\\"pathSeparator\\";a:6:{s:4:\\"name\\";s:13:\\"pathSeparator\\";s:4:\\"desc\\";s:27:\\"prop_feo.pathseparator_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:1:\\"\\/\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:7:\\"pathTpl\\";a:6:{s:4:\\"name\\";s:7:\\"pathTpl\\";s:4:\\"desc\\";s:21:\\"prop_feo.pathtpl_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:11:\\"feoPathLink\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:9:\\"showFiles\\";a:6:{s:4:\\"name\\";s:9:\\"showFiles\\";s:4:\\"desc\\";s:23:\\"prop_feo.showfiles_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:15:\\"showDirectories\\";a:6:{s:4:\\"name\\";s:15:\\"showDirectories\\";s:4:\\"desc\\";s:29:\\"prop_feo.showdirectories_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:7:\\"showExt\\";a:6:{s:4:\\"name\\";s:7:\\"showExt\\";s:4:\\"desc\\";s:21:\\"prop_feo.showext_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:6:\\"sortBy\\";a:6:{s:4:\\"name\\";s:6:\\"sortBy\\";s:4:\\"desc\\";s:20:\\"prop_feo.sortby_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:4:{i:0;a:2:{s:4:\\"text\\";s:12:\\"feo.filename\\";s:5:\\"value\\";s:8:\\"filename\\";}i:1;a:2:{s:4:\\"text\\";s:8:\\"feo.date\\";s:5:\\"value\\";s:4:\\"date\\";}i:2;a:2:{s:4:\\"text\\";s:8:\\"feo.size\\";s:5:\\"value\\";s:4:\\"size\\";}i:3;a:2:{s:4:\\"text\\";s:13:\\"feo.extension\\";s:5:\\"value\\";s:9:\\"extension\\";}}s:5:\\"value\\";s:8:\\"filename\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:7:\\"sortDir\\";a:6:{s:4:\\"name\\";s:7:\\"sortDir\\";s:4:\\"desc\\";s:21:\\"prop_feo.sortdir_desc\\";s:4:\\"type\\";s:4:\\"list\\";s:7:\\"options\\";a:2:{i:0;a:2:{s:4:\\"text\\";s:7:\\"feo.asc\\";s:5:\\"value\\";s:3:\\"ASC\\";}i:1;a:2:{s:4:\\"text\\";s:8:\\"feo.desc\\";s:5:\\"value\\";s:4:\\"DESC\\";}}s:5:\\"value\\";s:3:\\"ASC\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:13:\\"allowDownload\\";a:6:{s:4:\\"name\\";s:13:\\"allowDownload\\";s:4:\\"desc\\";s:27:\\"prop_feo.allowdownload_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:19:\\"requireAuthDownload\\";a:6:{s:4:\\"name\\";s:19:\\"requireAuthDownload\\";s:4:\\"desc\\";s:33:\\"prop_feo.requireauthdownload_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:0;s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:19:\\"allowDownloadGroups\\";a:6:{s:4:\\"name\\";s:19:\\"allowDownloadGroups\\";s:4:\\"desc\\";s:33:\\"prop_feo.allowdownloadgroups_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:13:\\"showDownloads\\";a:6:{s:4:\\"name\\";s:13:\\"showDownloads\\";s:4:\\"desc\\";s:27:\\"prop_feo.showdownloads_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:15:\\"uniqueDownloads\\";a:6:{s:4:\\"name\\";s:15:\\"uniqueDownloads\\";s:4:\\"desc\\";s:29:\\"prop_feo.uniquedownloads_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:14:\\"useGeolocation\\";a:6:{s:4:\\"name\\";s:14:\\"useGeolocation\\";s:4:\\"desc\\";s:28:\\"prop_feo.usegeolocation_desc\\";s:4:\\"type\\";s:13:\\"combo-boolean\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";b:1;s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:13:\\"toPlaceholder\\";a:6:{s:4:\\"name\\";s:13:\\"toPlaceholder\\";s:4:\\"desc\\";s:27:\\"prop_feo.toplaceholder_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}s:6:\\"navKey\\";a:6:{s:4:\\"name\\";s:6:\\"navKey\\";s:4:\\"desc\\";s:20:\\"prop_feo.navkey_desc\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";s:0:\\"\\";s:5:\\"value\\";s:2:\\"fd\\";s:7:\\"lexicon\\";s:21:\\"filelister:properties\\";}}","moduleguid":""}',
        'guid' => 'e0cc689f1a46fb482b53125534cc7284',
        'native_key' => 0,
        'signature' => '0379ecc9320f3092574a13e9eb7a571d',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Children' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'category',
      'related_objects' => true,
      'related_object_attributes' => 
      array (
        'Snippets' => 
        array (
          'preserve_keys' => false,
          'update_object' => true,
          'unique_key' => 'name',
        ),
        'Chunks' => 
        array (
          'preserve_keys' => false,
          'update_object' => true,
          'unique_key' => 'name',
        ),
      ),
    ),
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
    'Chunks' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'filelister',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"filelister-1.1.1-pl\\/modCategory\\/89a7ee3537e0a0eed44ad6d54253c1e8\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"filelister"}',
    ),
    1 => 
    array (
      'type' => 'php',
      'body' => '{"source":"filelister-1.1.1-pl\\/modCategory\\/89a7ee3537e0a0eed44ad6d54253c1e8.resolve.tables.resolver","type":"php","name":"resolve.tables"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'b3398d6b8c8e8a7fdb0ed758177b29a1',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => '89a7ee3537e0a0eed44ad6d54253c1e8',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"FileLister"}',
);