html, body, div, span, applet, object, iframe,
h1, h2, h3, h4, h5, h6, p, blockquote, pre,
a, abbr, acronym, address, big, cite, code,
del, dfn, em, img, ins, kbd, q, s, samp,
small, strike, strong, sub, sup, tt, var,
b, u, i, center,
dl, dt, dd, ol, ul, li,
fieldset, form, label, legend,
table, caption, tbody, tfoot, thead, tr, th, td,
article, aside, canvas, details, embed,
figure, figcaption, footer, header, hgroup,
menu, nav, output, ruby, section, summary,
time, mark, audio, video {
  margin: 0;
  padding: 0;
  border: 0;
  font: inherit;
  font-size: 100%;
  vertical-align: baseline; }

html {
  line-height: 1; }

ol, ul {
  list-style: none; }

table {
  border-collapse: collapse;
  border-spacing: 0; }

caption, th, td {
  text-align: left;
  font-weight: normal;
  vertical-align: middle; }

q, blockquote {
  quotes: none; }
  q:before, q:after, blockquote:before, blockquote:after {
    content: "";
    content: none; }

a img {
  border: none; }

article, aside, details, figcaption, figure, footer, header, hgroup, main, menu, nav, section, summary {
  display: block; }

/*  Syntax Quick Reference
  --------------------------
  column($ratios: 1, $offset: 0, $cycle: 0, $uncycle: 0, $gutter: $jeet-gutter)
  span($ratio: 1, $offset: 0)
  shift($ratios: 0, $col_or_span: column, $gutter: $jeet-gutter)
  unshift()
  edit()
  center($max_width: 1410px, $pad: 0)
  stack($pad: 0, $align: false)
  unstack()
  align($direction: both)
  cf()
*/
/**
 * Grid settings.
 * All values are defaults and can therefore be easily overidden.
 */
/**
 * List functions courtesy of the wonderful folks at Team Sass.
 * Check out their awesome grid: Singularity.
 */
/**
 * Get  percentage from a given ratio.
 * @param {number} [$ratio=1] - The column ratio of the element.
 * @returns {number} - The percentage value.
 */
/**
 * Work out the column widths based on the ratio and gutter sizes.
 * @param {number} [$ratios=1] - The column ratio of the element.
 * @param {number} [$gutter=$jeet-gutter] - The gutter for the column.
 * @returns {list} $width $gutter - A list containing the with and gutter for the element.
 */
/**
 * Get the set layout direction for the project.
 * @returns {string} $direction - The layout direction.
 */
/**
 * Replace a specified list value with a new value (uses built in set-nth() if available)
 * @param {list} $list - The list of values you want to alter.
 * @param {number} $index - The index of the list item you want to replace.
 * @param {*} $value - The value you want to replace $index with.
 * @returns {list} $list - The list with the value replaced or removed.
 * @warn if an invalid index is supplied.
 */
/**
 * Reverse a list (progressively enhanced for Sass 3.3)
 * @param {list} $list - The list of values you want to reverse.
 * @returns {list} $result - The reversed list.
 */
/**
 * Get the opposite direction to a given value.
 * @param {string} $dir - The direction you want the opposite of.
 * @returns {string} - The opposite direction to $dir.
 * @warn if an incorrect string is provided.
 */
/**
 * Style an element as a column with a gutter.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [$cycle=0] - Easily create an nth column grid where $cycle equals the number of columns.
 * @param {number} [$uncycle=0] - Undo a previous cycle value to allow for a new one.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column mixin.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Get the width of a column and nothing else.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Get the gutter size of a column and nothing else.
 * @param {number} [ratios=1] - A width relative to its container as a fraction.
 * @param {number} [gutter=jeet.gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * An alias for the column-width function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * An alias for the column-gutter function.
 * @param [$args...] - All arguments get passed through to column().
 */
/**
 * Style an element as a column without any gutters for a seamless row.
 * @param {number} [$ratios=1] - A width relative to its container as a fraction.
 * @param {number} [$offset=0] - A offset specified as a fraction (see $ratios).
 * @param {number} [cycle=0] - Easily create an nth column grid where cycle equals the number of columns.
 * @param {number} [uncycle=0] - Undo a previous cycle value to allow for a new one.
 */
/**
 * Reorder columns without altering the HTML.
 * @param {number} [$ratios=0] - Specify how far along you want the element to move.
 * @param {string} [$col-or-span=column] - Specify whether the element has a gutter or not.
 * @param {number} [$gutter=$jeet-gutter] - Specify the gutter width as a percentage of the containers width.
 */
/**
 * Reset an element that has had shift() applied to it.
 */
/**
 * View the grid and its layers for easy debugging.
 * @param {string} [$color=black] - The background tint applied.
 * @param {boolean} [$important=false] - Whether to apply the style as !important.
 */
/**
 *  Alias for edit().
 */
/**
 * Horizontally center an element.
 * @param {number} [$max-width=1410px] - The max width the element can be.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 */
/**
 * Uncenter an element.
 */
/**
 * Stack an element so that nothing is either side of it.
 * @param {number} [$pad=0] - Specify the element's left and right padding.
 * @param {boolean/string} [$align=false] - Specify the text align for the element.
 */
/**
 * Unstack an element.
 */
/**
 * Center an element on either or both axes.
 * @requires A parent container with relative positioning.
 * @param {string} [$direction=both] - Specify which axes to center the element on.
 */
/**
 * Apply a clearfix to an element.
 */
/*-----------------------------------------------------------------------------------/
/ Dependencies
/-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------/
/ Colors
/-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------/
/ Units
/-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------/
/ Media queries
/-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------/
/ Partials
/-----------------------------------------------------------------------------------*/
.wrapper {
  display: block;
  min-height: 100%;
  _height: 100%;
  width: 100%;
  position: absolute;
  top: 0px;
  z-index: 0;
  margin: 0px auto; }

section {
  margin-bottom: 120px;
  *zoom: 1;
  width: auto;
  max-width: 1170px;
  float: none;
  display: block;
  margin-right: auto;
  margin-left: auto;
  padding-left: 0;
  padding-right: 0; }
  section:before, section:after {
    content: '';
    display: table; }
  section:after {
    clear: both; }
  section article {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 65.66667%;
    margin-left: 0%;
    margin-right: 3%;
    position: relative;
    left: 34.33333%; }
    section article:before, section article:after {
      content: '';
      display: table; }
    section article:after {
      clear: both; }
    section article:last-child {
      margin-right: 0%; }
  section aside {
    *zoom: 1;
    float: left;
    clear: none;
    text-align: inherit;
    width: 31.33333%;
    margin-left: 0%;
    margin-right: 3%;
    position: relative;
    left: -68.66667%; }
    section aside:before, section aside:after {
      content: '';
      display: table; }
    section aside:after {
      clear: both; }
    section aside:last-child {
      margin-right: 0%; }

@media only screen and (max-width: 640px) {
  section {
    margin: 0 10px 120px 10px; }
    section article {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 100%;
      margin-left: 0%;
      margin-right: 3%;
      position: static;
      left: 0; }
      section article:before, section article:after {
        content: '';
        display: table; }
      section article:after {
        clear: both; }
      section article:last-child {
        margin-right: 0%; }
    section aside {
      *zoom: 1;
      float: left;
      clear: none;
      text-align: inherit;
      width: 100%;
      margin-left: 0%;
      margin-right: 3%;
      position: static;
      left: 0; }
      section aside:before, section aside:after {
        content: '';
        display: table; }
      section aside:after {
        clear: both; }
      section aside:last-child {
        margin-right: 0%; } }
@font-face {
  font-family: 'BloklettersBalpen';
  src: url("/assets/fonts/Blokletters-Balpen-webfont.eot");
  src: url("/assets/fonts/Blokletters-Balpen-webfont.eot?iefix") format("eot"), url("/assets/fonts/Blokletters-Balpen-webfont.woff") format("woff"), url("/assets/fonts/Blokletters-Balpen-webfont.ttf") format("truetype"), url("/assets/fonts/Blokletters-Balpen-webfont.svg#webfontqQCANlOs") format("svg");
  font-weight: normal;
  font-style: normal; }
@font-face {
  font-family: 'BloklettersViltstift';
  src: url("/assets/fonts/Blokletters-Viltstift-webfont.eot");
  src: url("/assets/fonts/Blokletters-Viltstift-webfont.eot?iefix") format("eot"), url("/assets/fonts/Blokletters-Viltstift-webfont.woff") format("woff"), url("/assets/fonts/Blokletters-Viltstift-webfont.ttf") format("truetype"), url("/assets/fonts/Blokletters-Viltstift-webfont.svg#webfont4P6345Om") format("svg");
  font-weight: normal;
  font-style: normal; }
html {
  font-family: 'BloklettersBalpen', _sans;
  line-height: 1;
  color: #000; }

a {
  color: #117f3b;
  text-decoration: none;
  transition: all ease-in 300ms; }
  a:hover {
    color: #0a4c24;
    transition: all ease-in 300ms; }

h1, h2, h3, h4 {
  font-family: 'BloklettersViltstift', _sans;
  margin-bottom: 12px; }

h1 {
  font-size: 24;
  font-size: 1.5rem;
  line-height: 35;
  line-height: 2.1875rem; }

h2 {
  font-size: 14;
  font-size: 0.875rem;
  line-height: 18;
  line-height: 1.125rem;
  color: #117f3b; }

h3 {
  font-size: 14;
  font-size: 0.875rem;
  line-height: 18;
  line-height: 1.125rem; }

h4 {
  font-size: 12;
  font-size: 0.75rem;
  line-height: 18;
  line-height: 1.125rem; }

p {
  font-size: 12;
  font-size: 0.75rem;
  line-height: 18;
  line-height: 1.125rem;
  margin-bottom: 12px; }
  p:last-child {
    margin-bottom: 0; }

strong,
b {
  font-family: 'BloklettersViltstift', _sans; }

header {
  min-height: 500px;
  background-repeat: no-repeat;
  background-size: cover;
  background-image: url(/assets/img/header-bground.jpg); }
  header nav {
    height: 36px;
    border-bottom: 1px solid #CDCED3; }
    header nav ul {
      *zoom: 1;
      width: auto;
      max-width: 1170px;
      float: none;
      display: block;
      margin-right: auto;
      margin-left: auto;
      padding-left: 0;
      padding-right: 0; }
      header nav ul:before, header nav ul:after {
        content: '';
        display: table; }
      header nav ul:after {
        clear: both; }
      header nav ul li {
        display: inline-block;
        position: relative; }
        header nav ul li:after {
          content: "";
          background-image: url(/assets/img/ruitje.png);
          background-size: 10px 17px;
          background-repeat: no-repeat;
          width: 10px;
          height: 17px;
          display: block;
          position: absolute;
          right: -10px;
          top: 11px; }
        header nav ul li:last-of-type:after {
          display: none; }
        header nav ul li a {
          font-family: 'BloklettersViltstift', _sans;
          color: #000;
          display: block;
          font-size: 14px;
          font-size: 0.875rem;
          padding: 15px 16px 23px 16px; }
          header nav ul li a.active {
            background-image: url(/assets/img/nav-active.png);
            background-size: 195px 22px;
            background-repeat: no-repeat;
            background-position: center bottom; }
      header nav ul .lang {
        float: right; }
        header nav ul .lang li {
          display: block;
          float: left; }
          header nav ul .lang li:after {
            display: none; }
          header nav ul .lang li a {
            padding: 9px 4px 4px 4px; }
            header nav ul .lang li a.active {
              background: none;
              fill: #117f3b; }
            header nav ul .lang li a .icon {
              width: 20px;
              height: 20px; }
            header nav ul .lang li a .mls {
              position: fixed;
              left: -9999px;
              top: 0; }
        header nav ul .lang img {
          width: 20px;
          height: 20px; }

@media only screen and (max-width: 640px) {
  min-height: 340px; }
footer {
  min-height: 120px;
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  display: block; }

/*# sourceMappingURL=screen.css.map */
